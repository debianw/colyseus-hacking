{"version":3,"sources":["Game.js","App.js","serviceWorker.js","index.js"],"names":["Game","state","started","rejoin","rooms","messages","session","message","React","createRef","getAvailableRooms","_this","client","err","console","error","setState","createClient","Colyseus","onOpen","add","log","onClose","onError","start","gameId","props","room","sessionId","join","onJoin","onStateChange","_ref","onLeave","send","current","value","this","_this2","_this$state","react_default","a","createElement","length","map","key","roomId","ref","onChange","e","target","onClick","msg","id","Component","App","className","src_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0eff95cc.chunk.js","sourcesContent":["//\nimport React, { Component } from 'react'\nimport * as Colyseus from 'colyseus.js'\n\n//\nclass Game extends Component {\n  state = {\n    started: false,\n    rejoin: false,\n    rooms: [],\n    messages: [],\n    session: null,\n    message: ''\n  }\n\n  message = React.createRef()\n\n  /**\n   * \n   */\n\n  componentDidMount() {\n    this.createClient()\n  }\n\n  /**\n   * \n   */\n\n  getAvailableRooms = () => {\n    this.client.getAvailableRooms('game', (rooms, err) => {\n      if (err) return console.error(err)\n      this.setState({ rooms })\n    })\n  }\n\n  /**\n   * \n   */\n\n  createClient = () => {\n    // this.client = new Colyseus.Client(`ws://waly.io:8000`) \n    this.client = new Colyseus.Client(`ws://dev-rt.gambit.com/example`) \n\n    this.client.onOpen.add(() => {\n      console.log('connection is now open!')\n      if (this.state.started)\n        this.setState({ rejoin: true })\n    })\n\n    this.client.onClose.add(() => {\n      console.log('connection has been closed!')\n    })\n    this.client.onError.add((err) => console.log('something wrong happened', err))\n  }\n\n  /**\n   * \n   */\n\n  start = () => {\n    const { gameId } = this.props\n\n    if (this.room) {\n      console.log('rejoining!!!')\n      this.room = this.client.rejoin('game', this.state.sessionId)\n    } else {\n      this.room = this.client.join('game', { gameId })\n    }\n\n    this.room.onJoin.add(() => {\n      console.log('client joined!')\n      this.getAvailableRooms()\n      this.setState({ started: true, rejoin: false, session: this.room.sessionId })\n    })\n\n    this.room.onStateChange.add(({ messages }) => {\n      this.setState({ messages })\n    })\n\n    this.room.onLeave.add(() => {\n      console.log('client left the room')\n    })\n\n    this.room.onError.add(function(err) {\n      console.log(\"oops, error ocurred:\");\n      console.log(err);\n    });\n  }\n\n  send = () => {\n    if (!this.message.current.value) return\n    this.room.send(this.message.current.value)\n    this.setState({ message: '' })\n  }\n\n  /**\n   * \n   */\n\n  render() {\n    const { rooms, started, messages, rejoin, session, message } = this.state\n\n    return (\n      <div>\n        <h1> Chat Game {session} </h1>\n\n        <div>\n          <h4> Available Rooms! ({rooms.length})</h4>\n          {rooms.map(room => (\n            <div key={room.roomId}> {room.roomId} </div>\n          ))}\n        </div>\n\n        <input ref={this.message} onChange={(e) => this.setState({ message: e.target.value })} value={message} /> <button onClick={this.send}>SEND</button>\n\n        <div>\n          <h4>Messages</h4>\n          {messages.map(msg => (\n            <div key={msg.id}>{msg.message}</div>\n          ))}\n        </div>\n\n\n        { !started && <button onClick={this.start}>START GAME</button> }\n        { rejoin && <button onClick={this.start}>REJOIN</button>}\n      </div>\n    )\n  }\n}\n\n//\nexport default Game","//\nimport React, { Component } from 'react';\nimport Game from './Game'\n\n//\nclass App extends Component {\n  state = {\n    gameId: 'backgammon-01' \n  }\n\n  render() {\n    const { gameId } = this.state\n\n    return (\n      <div className=\"App\">\n        <Game gameId={gameId} />\n      </div>\n    );\n  }\n}\n\n//\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}